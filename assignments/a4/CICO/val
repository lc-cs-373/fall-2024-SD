Val
%%%
import java.util.*;

public abstract class Val {

  // Convert list of Val objects to an array
  public static Val[] toArray(List<Val> valList) {
    int n = valList.size();
    return valList.toArray(new Val[n]);
  }

  // Default apply method (throws error for non-procedure values)
  public Val apply(List<Ref> refList) {
    throw new RuntimeException("cannot apply " + this);
  }

  // Default truthiness check (override as needed)
  public boolean isTrue() {
    return true; // Everything is true except an IntVal of zero
  }

  // Helper methods for type casting
  public IntVal intVal() {
    throw new RuntimeException(this + ": not an Int");
  }

  public ProcVal procVal() {
    throw new RuntimeException(this + ": not a Proc");
  }
}

%%%

IntVal
%%%
import java.util.*;

public class IntVal extends Val {

  public int val;

  public IntVal(String s) {
    val = Integer.parseInt(s);
  }

  public IntVal(int v) {
    val = v;
  }

  @Override
  public IntVal intVal() {
    return this;
  }

  @Override
  public boolean isTrue() {
    return val != 0;
  }

  @Override
  public String toString() {
    return "" + val;
  }
}

%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

  public Formals formals; // Formal parameters
  public Exp body;        // Body of the procedure
  public Env env;         // Environment where the procedure was created

  public ProcVal(Formals formals, Exp body, Env env) {
    this.formals = formals;
    this.body = body;
    this.env = env;
  }

  @Override
  public Val apply(List<Ref> refList) {
    // Bind the formal parameters to the provided references
    Bindings bindings = new Bindings(formals.varList, refList);
    Env nenv = env.extendEnvRef(bindings);

    // Evaluate the procedure body
    Val result = body.eval(nenv);

    // Copy-out phase: update the actual parameters
    for (Ref ref : refList) {
      ref.copyOut();
    }

    return result;
  }

  @Override
  public ProcVal procVal() {
    return this;
  }

  @Override
  public String toString() {
    return "proc";
  }
}

%%%
